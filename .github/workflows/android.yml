name: Android CI

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '.github/**'
      - 'README.md'
      - 'LICENSE'
  workflow_dispatch:
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
      - name: Cache Gradle
        uses: actions/cache@v2.1.5
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Cache local Maven repository
        uses: actions/cache@v2.1.5
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Time tick
        run: echo "time_tick=$(date '+%Y%m%d%H%M')" >> $GITHUB_ENV
      - name: Signing Apk
        run: |
          echo '${{ secrets.ANDROID_JKS }}'|base64 -d > android.jks
          echo 'storeFile=../android.jks' >> local.properties
          echo 'storePassword=${{ secrets.STORE_PASSWORD }}' >> local.properties
          echo 'keyAlias=${{ secrets.KEY_ALIAS }}' >> local.properties
          echo 'keyPassword=${{ secrets.KEY_PASSWORD }}' >> local.properties
          echo 'buildTime=${{ env.time_tick }}' >> local.properties
      - name: Update summary.json
        run: ./gradlew summary
      - name: Build with Gradle
        run: ./gradlew publish
      - name: Move Apk
        run: |
          cd ${{ github.workspace }}/app/build/outputs/apk
          mv konachan/release/* konachan/
          rm -fr konachan/release
          mv yande/release/* yande/
          rm -fr yande/release
      - name: Artifact Apk
        uses: actions/upload-artifact@v2
        with:
          name: outputs
          path: ${{ github.workspace }}/app/build/outputs/**
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.time_tick }}
          release_name: pre-release ${{ env.time_tick }}
          body: |
            - ${{ github.ref }}
            - ${{ github.sha }}
          draft: false
          prerelease: true
      - name: Upload Release Konachan Apk
        id: upload-konachan-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ github.workspace }}/app/build/outputs/apk/konachan/app-konachan-release.apk
          asset_name: app-konachan-release.apk
          asset_content_type: application/apk
      - name: Upload Release Yande Apk
        id: upload-yande-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ github.workspace }}/app/build/outputs/apk/yande/app-yande-release.apk
          asset_name: app-yande-release.apk
          asset_content_type: application/apk