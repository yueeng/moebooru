// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.1'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.21'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.36.0'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://jitpack.io' }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task summary {
    def download = { name, host ->
        println "==========$name summary==========="
        def folder = new File("app/src/$name/assets")
        def fileEtag = new File("$folder/summary.etag")
        def etag = null
        if (fileEtag.exists()) etag = fileEtag.readLines().join('')
        def src = "https://$host/tag/summary.json"
        def url = new URL(src)
        def connection = (HttpURLConnection) url.openConnection()
        try {
            connection.connectTimeout = 1000 * 5
            connection.readTimeout = 1000 * 60
            connection.useCaches = true
            if (etag != null && etag != '') connection.setRequestProperty('if-none-match', etag)
            connection.connect()
            println "${connection.getResponseCode()}: ${connection.getResponseMessage()}"
            if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_MODIFIED) return
            def fileJson = new File("$folder/summary.json")
            connection.inputStream.withReader { i -> fileJson.withOutputStream { it << i } }
            def newEtag = connection.getHeaderField("ETag")
            println "etag: $etag -> $newEtag"
            if (newEtag != null && newEtag != '') fileEtag.withOutputStream { it << newEtag }
        } catch (Exception e) {
            println e.message
        } finally {
            connection.disconnect()
        }
    }
    doLast {
        download("konachan", "konachan.com")
        download("yande", "yande.re")
        return
    }
}

task publish {
    dependsOn 'summary'
    dependsOn 'app:assembleRelease'
    doLast {
        println 'publish'
    }
}